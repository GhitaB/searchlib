(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[798],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return h}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=i,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||a;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2900:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var n=r(2122),i=r(9756),a=(r(7294),r(3905)),o={sidebar_position:1},s={unversionedId:"harvesting/intro",id:"harvesting/intro",isDocsHomePage:!1,title:"Introduction",description:'EEA Semantic Search uses Airflow to run indexing. Airflow uses the "DAG" as',source:"@site/docs/harvesting/intro.md",sourceDirName:"harvesting",slug:"/harvesting/intro",permalink:"/searchlib/docs/harvesting/intro",editUrl:"https://github.com/eea/searchlib/edit/develop/website/docs/harvesting/intro.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebar",previous:{title:"Theming searchlib",permalink:"/searchlib/docs/searchlib-ui/theming"},next:{title:"Architecture",permalink:"/searchlib/docs/harvesting/architecture"}},l=[{value:"Common workflows",id:"common-workflows",children:[{value:"Automatically trigger reindexing of websites",id:"automatically-trigger-reindexing-of-websites",children:[]},{value:"Crawl a Plone restapi website",id:"crawl-a-plone-restapi-website",children:[]},{value:"Harvest a page",id:"harvest-a-page",children:[]}]},{value:"Task writing guidelines.",id:"task-writing-guidelines",children:[]}],c={toc:l};function u(e){var t=e.components,r=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'EEA Semantic Search uses Airflow to run indexing. Airflow uses the "DAG" as\na name for the Directed Acyclical Graphs objects that represent a complex\npipeline of tasks. In this documentation we\'ll use the "workflow" terminology,\nas that term is more familiar, DAG being a term focused more on the developers.'),(0,a.kt)("h2",{id:"common-workflows"},"Common workflows"),(0,a.kt)("h3",{id:"automatically-trigger-reindexing-of-websites"},"Automatically trigger reindexing of websites"),(0,a.kt)("p",null,"This workflow is triggered automatically every 12 hours. It reads a list of\nwebsites configured as an Airflow variable. Each website should provide\na sitemap.xml.gz file that lists available pages. Each website should also\nprovide a preferred crawled method (restapi/html parsing crawler). Initially we\nwill only implement restapi crawler."),(0,a.kt)("h3",{id:"crawl-a-plone-restapi-website"},"Crawl a Plone restapi website"),(0,a.kt)("p",null,"This task knows how to crawl a plone.restapi website. That means retrieving the\nsitemap and creating fetch tasks for each page. An additional task is to expire\npages that no longer exist in the current index."),(0,a.kt)("p",null,"We will need a database of all the pages. It should include things like:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Website"),(0,a.kt)("li",{parentName:"ul"},"Page URL"),(0,a.kt)("li",{parentName:"ul"},"Last crawl status"),(0,a.kt)("li",{parentName:"ul"},"Last crawl address"),(0,a.kt)("li",{parentName:"ul"},"Crawl history (+ details table)")),(0,a.kt)("p",null,"The crawl history details table will be automatically vacuumed to include only\nthe last 5 entries for each page."),(0,a.kt)("p",null,'Each website needs to have a webmaster email adress, which will be used for\nnotifications. Each website will get its own "administration" page where\nstatistics on the indexed pages will be presented.'),(0,a.kt)("h3",{id:"harvest-a-page"},"Harvest a page"),(0,a.kt)("p",null,"A fetched URL resource is used as the input in a data harvesting DAG. Among\nthe tasks to be performed are: fields normalization, metadata enrichment and\nfinal indexing."),(0,a.kt)("h2",{id:"task-writing-guidelines"},"Task writing guidelines."),(0,a.kt)("p",null,"All tasks should define a version in their docs."))}u.isMDXComponent=!0}}]);