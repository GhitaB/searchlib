# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
---
version: '2.1'
x-airflow-common:
  &airflow-common
#  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.2}
  build: .
  env_file:
    - airflow.env
  environment:
    &airflow-common-env
    AIRFLOW_VAR_FOO: BAR
    AIRFLOW_VAR_FOO_BAZ: '{"hello":"world"}'
    AIRFLOW_VAR_TEST_WEBSITES: '["https://biodiversity.europa.eu1"]'
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__CORE__PARALLELISM: 128
    AIRFLOW__CORE__DAG_CONCURRENCY: 64
  volumes:
    - dags:/opt/airflow/dags
    - logs:/opt/airflow/logs
    - plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver

    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower

    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  es:
      image: eeacms/elastic:7
      depends_on:
          - es-sysctl

      environment:
          - "cluster.name=es7_test"
          - "node.name=es7_standalone"
          - "discovery.type=single-node"
          - "xpack.security.enabled=false"
          - "name=elastic7"
          - "elastic_password=qwerty"
      ulimits:
          memlock:
              soft: -1
              hard: -1
          nofile:
              soft: 65536
              hard: 65536
      mem_limit: 4073741824
      mem_swappiness: 0
      cap_add:
          - IPC_LOCK

      volumes_from:
          - es7-storage-volume
      ports:
          - 9200:9200

  es-sysctl:
      network_mode: none
      image: rawmind/alpine-sysctl:0.1
      privileged: true
      environment:
          - "SYSCTL_KEY=vm.max_map_count"
          - "SYSCTL_VALUE=262144"

  es7-storage-volume:
      network_mode: none
      image: rawmind/alpine-volume:0.0.2-1
      environment:
          - SERVICE_UID=1000
          - SERVICE_GID=1000
          - SERVICE_VOLUME=/usr/share/elasticsearch/data
      volumes:
          - es7-storage-volume:/usr/share/elasticsearch/data

  rabbitmq:
      image: eeacms/rabbitmq:3.7.15-1
      environment:
          RABBITMQ_DEFAULT_PASS: guest
          RABBITMQ_DEFAULT_USER: guest
          TZ: Europe/Copenhagen
      ports:
          - 5672:5672
          - 15672:15672

  logstash:
      image: logstash:7.12.1
      volumes:
          - ../logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
          - ../logstash/logstash.conf:/usr/share/logstash/config/logstash.conf
      depends_on:
          - es

  # postgrest:
  #   image: postgrest/postgrest
  #
  #   links:
  #     - postgres-db:db
  #   environment:
  #     PGRST_DB_URI: postgres://app_user:password@db:5432/tasks_db
  #     PGRST_DB_SCHEMA: public
  #     PGRST_DB_ANON_ROLE: app_user #In production this role should not be the same as the one used for the connection
  #     PGRST_SERVER_PROXY_URI: "http://127.0.0.1:3000"
  #   depends_on:
  #     - postgres-db
  #
  # postgres-db:
  #   image: postgres
  #   environment:
  #     POSTGRES_DB: tasks_db
  #     POSTGRES_USER: app_user
  #     POSTGRES_PASSWORD: password
  #   volumes:
  #     - postgres-tasks-db-volume:/var/lib/postgresql/data
volumes:
  postgres-db-volume:
  postgres-tasks-db-volume:
  dags:
  logs:
  plugins:
  es7-storage-volume:
    driver: local

